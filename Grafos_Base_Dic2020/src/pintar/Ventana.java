/*  UNIVERSIDAD DE PAMPLONA
    Ingeniería de Sistemas - Matemáticas discretas: Grafos
    M.Sc. Luis Armando Portilla Granados

    *** ACTUALIZADO *** 
    Mayo 7 de 2018

    *** ACTUALIZADO *** 
    Wilmer Rodríguez S
    Diciembre 19 2020
        # Se cambió el diseño de la app
        # Se cambió la organización de la interfaz gráfica y los layouts
        # Se agregó la posibilidad de borrar nodos y aristas
        # Se agregó la posibilidad de modificar la posición de los nodos mediante el mouse
        # Se cambió la forma como se decide y se imprimen los nombres de los nodos
        # Se cambió la manera como se obtienen las cadenas de texto de los TextField a mostrar
 */
package pintar;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Image;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Panel;
import java.awt.Point;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.awt.image.BufferedImage;
import javax.swing.Icon;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.JFrame;
import javax.swing.JLayeredPane;
import javax.swing.JPanel;

/**
 *
 * @author Mariana
 */
public class Ventana extends JFrame {

    /**
     * Variables de ancho y alto de la pantalla donde se ejecuta la app. Ayuda a
     * mantener la relacion de aspecto en diferentes resoluciones
     */
    public static final int ANCHO = java.awt.Toolkit.getDefaultToolkit().getScreenSize().width;
    public static final int ALTO = java.awt.Toolkit.getDefaultToolkit().getScreenSize().height;
    public static Color COLOR_NODO = new Color(251, 80, 2);
    public static Color COLOR_SOBRE_NODO = new Color(255, 174, 201);

    private Lienzo lienzo;

    static final int t = 400;  // tamaño
    static Nodo[] nodos = new Nodo[t];
    static Arista aristas[] = new Arista[t * 2];
    static int[][] matrizAd = new int[t][t];
    static int[][] matrizIn = new int[t][t * 2];
    int indiceNodos = 0;
    int indiceAristas = 0;

    Nodo nodoSelec1 = null;
    Nodo nodoSelec2 = null;
    private boolean moviendo = false;
    private Nodo nodoAMover;

    /**
     * add(panel); Creates new form ventana
     */
    public Ventana() {
        this.setPreferredSize(new Dimension((int) (ANCHO * 0.65), (int) (ALTO * 0.7)));
        initComponents();

        setIconImage(new ImageIcon(getClass().getResource("/imagenes/logo .jpg")).getImage());
        setLocationRelativeTo(null);

        /**
         * Crear Lienzo y agregarlo a panel Grafo
         */
        lienzo = new Lienzo(t);
        pnGrafo.add(lienzo, BorderLayout.CENTER);
        agregarEventos();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnFondo = new javax.swing.JPanel();
        pnCabecera = new javax.swing.JPanel();
        pnCabMargen = new javax.swing.JPanel();
        pnCabIcon = new javax.swing.JPanel();
        pnFondCentro = new javax.swing.JPanel();
        pnCentArriba = new javax.swing.JPanel();
        pnArribAlgorit = new javax.swing.JPanel();
        pnAlgoritmos = new javax.swing.JPanel();
        pnNorteBotones = new javax.swing.JPanel();
        pnCentro = new javax.swing.JPanel();
        boton_abrir = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        inicio = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        destino = new javax.swing.JTextField();
        pnSur = new javax.swing.JPanel();
        pnSurEliminarNodo = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        nodoAEliminar = new javax.swing.JTextField();
        eliminarNodo = new javax.swing.JButton();
        pnSurEliminarArista = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        arisElimi1 = new javax.swing.JTextField();
        arisElimi2 = new javax.swing.JTextField();
        eliminarArista = new javax.swing.JButton();
        pnArribGrafo = new javax.swing.JPanel();
        pnGrafo = new javax.swing.JPanel();
        pnCentAbajo = new javax.swing.JPanel();
        pnAbajIntruc = new javax.swing.JPanel();
        pnInstruc = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        pnIns = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        pnAbajBotones = new javax.swing.JPanel();
        btnSalir = new javax.swing.JButton();
        btnNuevoGrafo = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Matemáticas discretas - Grafos");

        pnFondo.setLayout(new java.awt.BorderLayout(5, 5));

        pnCabecera.setBackground(new java.awt.Color(255, 255, 255));
        pnCabecera.setLayout(new java.awt.BorderLayout());

        pnCabMargen.setBackground(new java.awt.Color(255, 255, 255));
        pnCabMargen.setPreferredSize(new java.awt.Dimension(50, 50));

        javax.swing.GroupLayout pnCabMargenLayout = new javax.swing.GroupLayout(pnCabMargen);
        pnCabMargen.setLayout(pnCabMargenLayout);
        pnCabMargenLayout.setHorizontalGroup(
            pnCabMargenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
        );
        pnCabMargenLayout.setVerticalGroup(
            pnCabMargenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
        );

        pnCabecera.add(pnCabMargen, java.awt.BorderLayout.WEST);

        pnCabIcon.setBackground(new java.awt.Color(255, 255, 255));
        pnCabIcon.setPreferredSize(new java.awt.Dimension(1033, 50));
        pnCabIcon.setLayout(new java.awt.BorderLayout());
        pnCabecera.add(pnCabIcon, java.awt.BorderLayout.CENTER);

        pnFondo.add(pnCabecera, java.awt.BorderLayout.NORTH);

        pnFondCentro.setLayout(new java.awt.BorderLayout(5, 5));

        pnCentArriba.setLayout(new java.awt.BorderLayout(5, 5));

        pnArribAlgorit.setPreferredSize(new java.awt.Dimension(200, 546));
        pnArribAlgorit.setLayout(new java.awt.BorderLayout(5, 5));
        pnArribAlgorit.setPreferredSize(new java.awt.Dimension((int)(ANCHO*0.14), 546));

        pnAlgoritmos.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Algoritmos", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 15), new java.awt.Color(102, 102, 102))); // NOI18N
        pnAlgoritmos.setForeground(new java.awt.Color(102, 102, 102));
        pnAlgoritmos.setPreferredSize(new java.awt.Dimension(200, 597));
        pnAlgoritmos.setPreferredSize(new java.awt.Dimension((int)(ANCHO*0.14), 546));
        pnAlgoritmos.setLayout(new java.awt.BorderLayout());

        pnNorteBotones.setBackground(new java.awt.Color(255, 255, 255));
        pnNorteBotones.setLayout(new java.awt.GridLayout(1, 0));
        pnAlgoritmos.add(pnNorteBotones, java.awt.BorderLayout.NORTH);

        pnCentro.setBackground(new java.awt.Color(255, 255, 255));
        pnCentro.setLayout(new java.awt.BorderLayout());

        boton_abrir.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        boton_abrir.setText("abrir imagen");
        boton_abrir.setMaximumSize(new java.awt.Dimension(100, 20));
        boton_abrir.setMinimumSize(new java.awt.Dimension(25, 25));
        boton_abrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_abrirActionPerformed(evt);
            }
        });
        pnCentro.add(boton_abrir, java.awt.BorderLayout.PAGE_START);

        jButton3.setBackground(new java.awt.Color(255, 255, 255));
        jButton3.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        jButton3.setForeground(new java.awt.Color(51, 51, 51));
        jButton3.setText("Conexo");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        pnCentro.add(jButton3, java.awt.BorderLayout.PAGE_END);

        jButton1.setText("Ruta más corta");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        inicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inicioActionPerformed(evt);
            }
        });

        jLabel3.setText("Inicio");

        jLabel4.setText("Destino");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jButton1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(destino, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(inicio, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(47, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(326, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(destino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addComponent(jButton1)
                .addContainerGap())
        );

        pnCentro.add(jPanel1, java.awt.BorderLayout.CENTER);

        pnAlgoritmos.add(pnCentro, java.awt.BorderLayout.CENTER);

        pnSur.setBackground(new java.awt.Color(255, 255, 255));
        pnSur.setLayout(new java.awt.GridLayout(2, 1));

        pnSurEliminarNodo.setBackground(new java.awt.Color(255, 255, 255));
        pnSurEliminarNodo.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Eliminar nodo", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 15), new java.awt.Color(102, 102, 102))); // NOI18N
        pnSurEliminarNodo.setLayout(new java.awt.GridLayout(1, 3, 3, 0));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(51, 51, 51));
        jLabel5.setText("Nodo:");
        pnSurEliminarNodo.add(jLabel5);

        nodoAEliminar.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        nodoAEliminar.setForeground(new java.awt.Color(51, 51, 51));
        nodoAEliminar.setToolTipText("");
        nodoAEliminar.setSelectionColor(new java.awt.Color(0, 196, 255));
        nodoAEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nodoAEliminarActionPerformed(evt);
            }
        });
        pnSurEliminarNodo.add(nodoAEliminar);

        eliminarNodo.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        eliminarNodo.setForeground(new java.awt.Color(51, 51, 51));
        eliminarNodo.setText("X");
        eliminarNodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarNodoActionPerformed(evt);
            }
        });
        pnSurEliminarNodo.add(eliminarNodo);

        pnSur.add(pnSurEliminarNodo);

        pnSurEliminarArista.setBackground(new java.awt.Color(255, 255, 255));
        pnSurEliminarArista.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Eliminar arista", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 15), new java.awt.Color(102, 102, 102))); // NOI18N
        pnSurEliminarArista.setLayout(new java.awt.GridLayout(1, 3, 3, 0));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(51, 51, 51));
        jLabel6.setText("Arista:");
        pnSurEliminarArista.add(jLabel6);

        arisElimi1.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        arisElimi1.setForeground(new java.awt.Color(51, 51, 51));
        arisElimi1.setToolTipText("");
        arisElimi1.setSelectionColor(new java.awt.Color(0, 196, 255));
        arisElimi1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arisElimi1ActionPerformed(evt);
            }
        });
        pnSurEliminarArista.add(arisElimi1);

        arisElimi2.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        arisElimi2.setForeground(new java.awt.Color(51, 51, 51));
        arisElimi2.setToolTipText("");
        arisElimi2.setSelectionColor(new java.awt.Color(0, 196, 255));
        pnSurEliminarArista.add(arisElimi2);

        eliminarArista.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        eliminarArista.setForeground(new java.awt.Color(51, 51, 51));
        eliminarArista.setText("X");
        eliminarArista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarAristaActionPerformed(evt);
            }
        });
        pnSurEliminarArista.add(eliminarArista);

        pnSur.add(pnSurEliminarArista);

        pnAlgoritmos.add(pnSur, java.awt.BorderLayout.SOUTH);

        pnArribAlgorit.add(pnAlgoritmos, java.awt.BorderLayout.WEST);

        pnCentArriba.add(pnArribAlgorit, java.awt.BorderLayout.WEST);

        pnArribGrafo.setLayout(new java.awt.BorderLayout(5, 5));

        pnGrafo.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(""), "Grafo", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 15), new java.awt.Color(102, 102, 102))); // NOI18N
        pnGrafo.setPreferredSize(new java.awt.Dimension(365, 365));
        pnGrafo.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                pnGrafoComponentResized(evt);
            }
        });
        pnGrafo.setLayout(new java.awt.BorderLayout());
        pnArribGrafo.add(pnGrafo, java.awt.BorderLayout.CENTER);

        pnCentArriba.add(pnArribGrafo, java.awt.BorderLayout.CENTER);

        pnFondCentro.add(pnCentArriba, java.awt.BorderLayout.CENTER);

        pnCentAbajo.setLayout(new java.awt.BorderLayout(5, 5));

        pnAbajIntruc.setLayout(new java.awt.BorderLayout(5, 5));

        pnInstruc.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Instrucciones", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 15), new java.awt.Color(102, 102, 102))); // NOI18N
        pnInstruc.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setBorder(null);

        pnIns.setBackground(new java.awt.Color(255, 255, 255));
        pnIns.setPreferredSize(new java.awt.Dimension(578, 120));
        pnIns.setLayout(new java.awt.GridLayout(0, 1));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 51, 51));
        jLabel1.setText("NODOS:  Agrega nodos haciendo clic sobre el panel \"Grafo\""); // NOI18N
        jLabel1.setPreferredSize(new java.awt.Dimension(399, 40));
        pnIns.add(jLabel1);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(51, 51, 51));
        jLabel2.setText("ARISTAS: Agrega aristas haciendo clic derecho  sobre el par de nodos que va a unir "); // NOI18N
        pnIns.add(jLabel2);

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(51, 51, 51));
        jLabel7.setText("ELIMINAR NODO: Busca el nodo por el nombre ingresado y lo elimina"); // NOI18N
        pnIns.add(jLabel7);

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(51, 51, 51));
        jLabel8.setText("ELIMINAR ARISTA: Busca la arista por el nombre ingresado y lo elimina. Es indiferente \"AB\" o \"BA\""); // NOI18N
        pnIns.add(jLabel8);

        jScrollPane1.setViewportView(pnIns);

        pnInstruc.add(jScrollPane1, java.awt.BorderLayout.PAGE_START);

        pnAbajIntruc.add(pnInstruc, java.awt.BorderLayout.CENTER);

        pnCentAbajo.add(pnAbajIntruc, java.awt.BorderLayout.CENTER);

        pnAbajBotones.setLayout(new java.awt.BorderLayout(5, 5));

        btnSalir.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        btnSalir.setForeground(new java.awt.Color(51, 51, 51));
        btnSalir.setText("Salir");
        btnSalir.setPreferredSize(new java.awt.Dimension(120, 25));
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });
        pnAbajBotones.add(btnSalir, java.awt.BorderLayout.WEST);

        btnNuevoGrafo.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        btnNuevoGrafo.setForeground(new java.awt.Color(51, 51, 51));
        btnNuevoGrafo.setText("Nuevo grafo");
        btnNuevoGrafo.setPreferredSize(new java.awt.Dimension(101, 40));
        btnNuevoGrafo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoGrafoActionPerformed(evt);
            }
        });
        pnAbajBotones.add(btnNuevoGrafo, java.awt.BorderLayout.CENTER);

        pnCentAbajo.add(pnAbajBotones, java.awt.BorderLayout.SOUTH);

        pnFondCentro.add(pnCentAbajo, java.awt.BorderLayout.SOUTH);

        pnFondo.add(pnFondCentro, java.awt.BorderLayout.CENTER);

        getContentPane().add(pnFondo, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Define a G(V,E)
    static String definicion(Nodo v[], int in, Arista a[], int ia) {
        String cadena = "V = { ";
        if (v[0] != null) {
            for (int i = 0; i < in - 1; i++) {
                cadena += v[i].getNombre() + ", ";
            }
            cadena += v[in - 1].getNombre();
        }

        cadena += " }\nA = { ";
        if (a[0] != null) {
            for (int i = 0; i < ia - 1; i++) {
                // si nombre de aristas                
                //cadena += a[i].getN1().getNombre() + a[i].getN2().getNombre() + ", " ; 

                //utilizando el nombre de la arista generada desde los nombres de los nodos en la clase Aristas
                cadena += a[i].getNombreA() + ", ";
            }
            cadena += a[ia - 1].getN1().getNombre() + a[ia - 1].getN2().getNombre();
        }

        cadena += " }";
        return cadena;
    }

    /**
     * Crea una cadena d etexto que relaciona los nombre de los nodos con las
     * aristas exixtentes
     *
     * @param m
     * @param in
     * @return
     */
    String mostrarAd(int m[][], int in) {
        String cadena = "";
        for (int i = 0; i < in; i++) {
            cadena += "\t" + nodos[i].getNombre();  // 3 espacios entre coluna o \t (Tabulador)
        }
        cadena += "\n";
        for (int i = 0; i < in; i++) {
            cadena += nodos[i].getNombre() + "\t";
            for (int j = 0; j < in; j++) {
                String add = (buscarArista(nodos[i].getNombre(), nodos[j].getNombre()) != -1) ? "1" : "0";
                matrizAd[i][j] = Integer.parseInt(add);
                cadena += String.valueOf(matrizAd[i][j]) + "\t";
            }
            cadena = cadena + "\n";
        }
        return (cadena);
    }

    private int buscarArista(String n1, String n2) {
        for (int i = 0; i < aristas.length; i++) {
            if (aristas[i] != null) {
                if (aristas[i].getNombreA().equals(n1 + n2)) {
                    return i;
                }
                if (aristas[i].getNombreA().equals(n2 + n1)) {
                    return i;
                }
            }
        }
        return -1;
    }

    // se encadena texto con las colmunas y filas + contenido de la matrizAd de adyacencia
    private String mostrarIn(int m[][], int in, Arista a[], int ia) {
        String cadena = "";
        if (a[0] != null) {
            for (int k = 0; k < ia; k++) {
                cadena += "\t" + a[k].getNombreA();
            }
        }
        cadena += "\n";
        for (int i = 0; i < in; i++) {
            cadena += nodos[i].getNombre() + "\t";
            for (int j = 0; j < ia; j++) {
                int add1 = (buscarArista(nodos[i].getNombre(), aristas[j].getN1().getNombre()) != -1) ? 1 : 0;
                int add2 = (buscarArista(nodos[i].getNombre(), aristas[j].getN2().getNombre()) != -1) ? 1 : 0;
                int add = 0;
                if (add1 == 1 || add2 == 1) {
                    if (nodos[i].getNombre().equals(aristas[j].getN1().getNombre())
                            || nodos[i].getNombre().equals(aristas[j].getN2().getNombre())) {
                        add = 1;
                    }
                }
                m[i][j] = add;
                cadena += String.valueOf(m[i][j]) + "\t ";
            }
            cadena = cadena + "\n";
        }
        return (cadena);
    }

    static int buscaIndiceNodo(Nodo[] v, int in, String h) {
        int j;
        for (j = 0; j < in; j++) {
            //equalsIgnoreCase() Compara dos strings para ver si son iguales
            //ignorando las diferencias entre mayúsculas y minúsculas
            if (v[j].getNombre().equalsIgnoreCase(h)) {
                return j;
            }
        }
        return -1;
    }

    // Comprueba si existe una arista unida a dos nodos
    boolean buscarArista(Nodo n1, Nodo n2) {
        for (Arista arista : aristas) {
            if (arista != null) {
                boolean a = arista.getN1().equals(n1), b = arista.getN2().equals(n2);
                boolean c = arista.getN2().equals(n1), d = arista.getN1().equals(n2);
                if ((a && b) || (c && d)) {
                    return true;
                }
            }
        }
        return false;
    }

    // método para conexo utilizando los nodos y aristas.. faltaría con la matrizAd
    // aporte del estudiante Daniel Quintana
    static boolean grafoConexo(Nodo v[], int iv, Arista a[], int ia) {
        int contNodos = 0;
        for (int i = 0; i < iv; i++) {
            boolean b = false;
            for (int j = 0; j < ia; j++) {
                if (comprobarNodoArista(v[i], a[j]) != 0) {
                    b = !b;
                    break;
                }
            }
            if (!b) {
                return false;
            }
            contNodos++;
        }
        return contNodos != 0;
    }

    // Comprueba si una arista pertenece a un nodo
    static int comprobarNodoArista(Nodo n, Arista a) {
        if (a != null && a.getN1().equals(n) || a.getN2().equals(n)) {
            return 1;
        }
        return 0;
    }

    /**
     * Actualiza el g´rfico del grafo en pantalla
     */
    private void pintarGrafo() {
        lienzo.setNodos(nodos);
        lienzo.setAristas(aristas);
        lienzo.repaint();

    }

    /**
     * permite crear los nodos y las aristas mediante click derecho e izquierdo
     *
     * @param evt
     */
    private void lienzoMouseEvent(java.awt.event.MouseEvent evt) {
        // TODO add your handling code here:
        int x = evt.getX();
        int y = evt.getY();
        /**
         * Click izquierdo: Crea un nodo en un punto dado
         */
        if (SwingUtilities.isLeftMouseButton(evt)) {
            if (ecuacionDeCirculo(evt.getPoint(), Nodo.d) == null) {
                int nombre = 1;
                char nom = 65;
                while (buscaIndiceNodo(nodos, indiceNodos, Integer.toString(nombre)) != -1) {
                    nombre++;
                }
                Nodo nodo = new Nodo(x, y, nombre);
                nodos[indiceNodos] = nodo;
                indiceNodos++;

                pintarGrafo();
                /*
                jTextArea1.setText(mostrarAd(matrizAd, indiceNodos));
                jTextArea1.setEditable(false);
                jTextArea2.setText(mostrarIn(matrizIn, indiceNodos, aristas, indiceAristas));
                jTextArea2.setEditable(false);
                jTextArea3.setText(definicion(nodos, indiceNodos, aristas, indiceAristas));
                jTextArea3.setEditable(false);
                 */
            } else {
                JOptionPane.showMessageDialog(null, "Ya existe un nodo en esta área");
            }
        }

        /**
         * Click derecho: Crea aristas entre dos puntos
         */
        if (SwingUtilities.isRightMouseButton(evt)) {
            Nodo n = ecuacionDeCirculo(evt.getPoint(), Nodo.d);
            if (n != null) {
                if (nodoSelec1 == null) {
                    nodoSelec1 = n;
                } else if (nodoSelec2 == null && !n.equals(nodoSelec1)) {
                    nodoSelec2 = n;
                    // aquí falta controlar que no se repita la arista con un método buscarArista
                    if (!buscarArista(nodoSelec1, nodoSelec2)) {
                        try {
                            int xx = buscaIndiceNodo(nodos, indiceNodos, nodoSelec1.getNombre());
                            int yy = buscaIndiceNodo(nodos, indiceNodos, nodoSelec2.getNombre());

                            matrizAd[xx][yy] = 1;
                            matrizAd[yy][xx] = 1;

                            matrizIn[xx][indiceAristas] = 1;
                            matrizIn[yy][indiceAristas] = 1;

                            Arista arista = new Arista(nodoSelec1, nodoSelec2);
                            nodoSelec1.agregarArista(arista);
                            nodoSelec2.agregarArista(arista);
                            aristas[indiceAristas] = arista;
                            indiceAristas++;

                            pintarGrafo();
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Error");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Ya existe una arista entre los nodos seleccionados");
                    }
                    /*
                    jTextArea1.setText(mostrarAd(matrizAd, indiceNodos));
                    jTextArea1.setEditable(false);

                    jTextArea2.setText(mostrarIn(matrizIn, indiceNodos, aristas, indiceAristas));
                    jTextArea2.setEditable(false);

                    jTextArea3.setText(definicion(nodos, indiceNodos, aristas, indiceAristas));
                    jTextArea3.setEditable(false);
                     */
                    nodoSelec1 = null;
                    nodoSelec2 = null;
                }
            }
        }
    }

    /**
     * Agrega los eventos de arrastre y movimiento del mouse al lienzo
     */
    private void agregarEventos() {
        lienzo.addMouseMotionListener(new MouseMotionAdapter() {
            @Override
            public void mouseMoved(MouseEvent e) {
                cambioMouse(e);
            }

            @Override
            public void mouseDragged(MouseEvent e) {
                arratreMouse(e);
            }
        });

        lienzo.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lienzoMouseEvent(evt);
            }

            public void mouseReleased(java.awt.event.MouseEvent evt) { // clic en el raton y luego soltarlo
                moviendo = false;
            }
        });
    }

    /**
     * Se activa cuando el mouse se mueve sobre el lienzo
     *
     * @param e
     */
    public void cambioMouse(MouseEvent e) {
        Nodo nodo = ecuacionDeCirculo(e.getPoint(), Nodo.d);
        if (nodo != null) {
            nodo.colorSobreNodo();
        } else {
            volverColorDefectoNodo();
        }
        pintarGrafo();
    }

    private void volverColorDefectoNodo() {
        for (Nodo nodo : nodos) {
            if (nodo != null) {
                nodo.colorDefecto();
            }
        }
    }

    /**
     * Cuando se arrastra el clic derecho del mouse
     *
     * @param e
     */
    public void arratreMouse(MouseEvent e) {
        // Si no tiene tiene un nodo seleccionado, y lo está moviendo
        if (!moviendo) {
            nodoAMover = ecuacionDeCirculo(e.getPoint(), Nodo.d);
        }
        if (nodoAMover != null) {
            // Actualiza la posicion del nodo que está moviendo, y lo pinta en pantalla
            nodoAMover.actualizarPosicion(e.getPoint());
            nodoAMover.colorSobreNodo();
            
            moviendo = true;
            
            pintarGrafo();
        } else {
            // Resetea los valores por defecto, para permitir mover otro nodo luego
            moviendo = false;
            nodoAMover = null;
        }
        
        
        
    }

    /**
     * *
     * Permite saber si cierto punto en el lienzo hace parte del circulo que
     * compone el Nodo
     *
     * @param punto Punto den el lienzo a verificar
     * @param RADIO Radio del Nodo
     * @return
     */
    public Nodo ecuacionDeCirculo(Point punto, int RADIO) {
        return verificarPosicion((punto.x), (punto.y), RADIO / 2);
    }

    /**
     * Permite saber si cierto punto en el lienzo hace parte del circulo que
     * compone el Nodo (Se llama el metodo ecuacionDeCirculo(Point punto, int
     * RADIO) )
     *
     * @param x
     * @param y
     * @param radMed
     * @return
     */
    private Nodo verificarPosicion(int x, int y, int radMed) {
        for (Nodo nodo : nodos) {
            if (nodo != null) {
                if (x > (nodo.getX() - radMed) && x < (nodo.getX() + radMed)) {
                    if (y > (nodo.getY() - radMed) && y < (nodo.getY() + radMed)) {
                        return nodo;
                    }
                }
            }
        }
        return null;
    }

    private void btnNuevoGrafoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoGrafoActionPerformed
        /* jTextArea1.setText("");
        jTextArea2.setText("");
        jTextArea3.setText("");
         */
        nodos = new Nodo[t];
        aristas = new Arista[t];
        pintarGrafo();

        matrizAd = new int[t][t];
        matrizIn = new int[t][t * 2];

        indiceNodos = 0;
        indiceAristas = 0;

        nodoSelec1 = null;
        nodoSelec2 = null;

    }//GEN-LAST:event_btnNuevoGrafoActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btnSalirActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        String cadena = definicion(nodos, indiceNodos, aristas, indiceAristas);
        if (grafoConexo(nodos, indiceNodos, aristas, indiceAristas)) {
            cadena += "\n El grafo ES conexo";
            //JOptionPane.showMessageDialog(null, "El grafo ES conexo");
        } else {
            cadena += "\n El grafo NO ES conexo";
            //JOptionPane.showMessageDialog(null, "El grafo NO es conexo");
        }
        /*
        jTextArea3.setText(cadena);
        jTextArea3.setEditable(false);
         */
    }//GEN-LAST:event_jButton3ActionPerformed

    private void pnGrafoComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_pnGrafoComponentResized
        pintarGrafo();
    }//GEN-LAST:event_pnGrafoComponentResized

    private void eliminarNodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarNodoActionPerformed
        String aEliminar = nodoAEliminar.getText().toUpperCase();
        // Si la cadena está vacia
        if (aEliminar.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Debe ingresar el nombre del nodo a eliminar");
            return;
        }

        // Si la cadena no está vacía
        // Buscar el nodo a eliminar
        int posNodo = -1;
        String nodoEliminado = "";
        for (int i = 0; i < nodos.length; i++) {
            if (nodos[i] != null) {
                if (aEliminar.equalsIgnoreCase(nodos[i].getNombre())) {
                    posNodo = i;
                    nodoEliminado = nodos[posNodo].getNombre();
                }
            }
        }

        // Si no se encuentra el nodo
        if (posNodo == -1) {
            JOptionPane.showMessageDialog(null, "No se ha encontrado en nodo " + aEliminar);
            return;
        }

        // Se se encuentra el nodo
        for (int i = posNodo; i < nodos.length - 1; i++) {
            if (nodos[i] != null) {
                nodos[i] = nodos[i + 1];
            }
        }
        nodos[nodos.length - 1] = null;
        indiceNodos--;

        // Actualizar las aristas, solo si existe una arista con el nodo eliminado
        for (int i = 0; i < indiceNodos; i++) {
            if (nodos[i] != null) {
                int posArista = buscarArista(nodoEliminado, nodos[i].getNombre());
                if (posArista != -1) {
                    for (int j = posArista; j < indiceAristas - 1; j++) {
                        aristas[j] = aristas[j + 1];
                    }
                    aristas[indiceAristas - 1] = null;
                    indiceAristas--;
                }
            }
        }

        // Actualizar la matriz de adyacencia
        /*
        jTextArea1.setText(mostrarAd(matrizAd, indiceNodos));
        jTextArea2.setText(mostrarIn(matrizIn, indiceNodos, aristas, indiceAristas));
        jTextArea3.setText(definicion(nodos, indiceNodos, aristas, indiceAristas));
         */
        // Repintar el grafo
        pintarGrafo();

        // Devolver el foco y eliminar el texto
        nodoAEliminar.setText("");
        nodoAEliminar.requestFocus();
    }//GEN-LAST:event_eliminarNodoActionPerformed

    private void eliminarAristaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarAristaActionPerformed
        // Recibe los nodos de la arista a eliminar
        String aEliminar1 = arisElimi1.getText().toUpperCase();
        String aEliminar2 = arisElimi2.getText().toUpperCase();

        // Si la cadenas están vacias, se sale
        if (aEliminar1.isEmpty() || aEliminar2.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Debe ingresar el nombre los nodos de la arista a eliminar");
            return;
        }

        // Busca la arista a eliminar. Si no existe, se sale
        int posArista = buscarArista(aEliminar1, aEliminar2);
        if (posArista == -1) {
            JOptionPane.showMessageDialog(null, "La arista no se ha encontrado. Digite un nombre válido.");
            return;
        }

        // Si se encuentra la arista, la elimina
        for (int i = posArista; i < aristas.length - 1; i++) {
            if (aristas[i] != null) {
                aristas[i] = aristas[i + 1];
            }
        }
        aristas[aristas.length - 1] = null;
        indiceAristas--;

        // Actualizar la matriz de adyacencia
        /*
        jTextArea1.setText(mostrarAd(matrizAd, indiceNodos));
        jTextArea2.setText(mostrarIn(matrizIn, indiceNodos, aristas, indiceAristas));
        jTextArea3.setText(definicion(nodos, indiceNodos, aristas, indiceAristas));
         */
        // Repintar el grafo
        pintarGrafo();

        // Devolver el foco y eliminar el texto
        arisElimi1.setText("");
        arisElimi1.setText("");
        arisElimi1.requestFocus();
    }//GEN-LAST:event_eliminarAristaActionPerformed


    private void boton_abrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_abrirActionPerformed
        JFileChooser fileChooser = new JFileChooser();

        int respuesta = fileChooser.showOpenDialog(this);

        if (respuesta == JFileChooser.APPROVE_OPTION) {
            File archivoSeleccionado = fileChooser.getSelectedFile();
            try {
                BufferedImage image = ImageIO.read(archivoSeleccionado);
                System.out.println(image.getData());
                lienzo.setBackground(image);
            } catch (IOException ex) {
                ex.printStackTrace();
            }

        }
    }//GEN-LAST:event_boton_abrirActionPerformed

    private void nodoAEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nodoAEliminarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nodoAEliminarActionPerformed

    private void arisElimi1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arisElimi1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_arisElimi1ActionPerformed

    private void inicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inicioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inicioActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String nodoInicial = inicio.getText();
        String nodoDestino = destino.getText();
        if (nodoInicial.isEmpty() || nodoDestino.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Debe ingresar el nombre de los nodos a verificar la ruta más corta");
            return;
        }
        Nodo inicial=null;
        Nodo destino=null;
        for (int i = 0; i < nodos.length; i++) {
            if (nodos[i] != null) {
                if (nodoInicial.equalsIgnoreCase(nodos[i].getNombre())) {
                     inicial = nodos[i];
                }
                else if (nodoDestino.equalsIgnoreCase(nodos[i].getNombre())) {
                     destino = nodos[i];
                }
                
            }else{
                   // JOptionPane.showMessageDialog(null, "uno o ambos nodos no se encuentran creados");
                }
        }
        dijkstra.mostrarRuta(inicial, destino);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     *
     * @return
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField arisElimi1;
    private javax.swing.JTextField arisElimi2;
    private javax.swing.JButton boton_abrir;
    private javax.swing.JButton btnNuevoGrafo;
    private javax.swing.JButton btnSalir;
    private javax.swing.JTextField destino;
    private javax.swing.JButton eliminarArista;
    private javax.swing.JButton eliminarNodo;
    private javax.swing.JTextField inicio;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nodoAEliminar;
    private javax.swing.JPanel pnAbajBotones;
    private javax.swing.JPanel pnAbajIntruc;
    private javax.swing.JPanel pnAlgoritmos;
    private javax.swing.JPanel pnArribAlgorit;
    private javax.swing.JPanel pnArribGrafo;
    private javax.swing.JPanel pnCabIcon;
    private javax.swing.JPanel pnCabMargen;
    private javax.swing.JPanel pnCabecera;
    private javax.swing.JPanel pnCentAbajo;
    private javax.swing.JPanel pnCentArriba;
    private javax.swing.JPanel pnCentro;
    private javax.swing.JPanel pnFondCentro;
    private javax.swing.JPanel pnFondo;
    private javax.swing.JPanel pnGrafo;
    private javax.swing.JPanel pnIns;
    private javax.swing.JPanel pnInstruc;
    private javax.swing.JPanel pnNorteBotones;
    private javax.swing.JPanel pnSur;
    private javax.swing.JPanel pnSurEliminarArista;
    private javax.swing.JPanel pnSurEliminarNodo;
    // End of variables declaration//GEN-END:variables
}
